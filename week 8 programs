1)Implement non-recursive Predictive Parser for the grammar

S -&amp;gt; aBa
B -&amp;gt; bB | ε
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;
int i=0,top=0;
char stack[20],ip[20];
void push(char c)
{
if (top&gt;=20)
printf(&quot;Stack Overflow&quot;);
else
stack[top++]=c;

}

void pop(void)
{
if(top&lt;0)
printf(&quot;Stack underflow&quot;);
else
top--;

}
void error(void)
{
printf(&quot;\n\nSyntax Error!!!! String is invalid\n&quot;);
exit(0);
}
int main()
{
int n;
printf(&quot;The given grammar is\n\n&quot;);
printf(&quot;S -&gt; aBa\n&quot;);
printf(&quot;B -&gt; bB | epsilon \n\n&quot;);
printf(&quot;Enter the string to be parsed:\n&quot;);
scanf(&quot;%s&quot;,ip);

n=strlen(ip);
ip[n]=&#39;$&#39;;
ip[n+1]=&#39;\0&#39;;
push(&#39;$&#39;);
push(&#39;S&#39;);

while(ip[i]!=&#39;\0&#39;)
{ if(ip[i]==&#39;$&#39; &amp;&amp; stack[top-1]==&#39;$&#39;)
{
printf(&quot;\n\n Successful parsing of string \n&quot;);
return 1;
}
else
if(ip[i]==stack[top-1])
{
printf(&quot;\nmatch of %c &quot;,ip[i]);
i++;pop();
}
else
{
if(stack[top-1]==&#39;S&#39; &amp;&amp; ip[i]==&#39;a&#39;)
{
printf(&quot; \n S -&gt;aBa&quot;);
pop();
push(&#39;a&#39;);
push(&#39;B&#39;);
push(&#39;a&#39;);

}
else
if(stack[top-1]==&#39;B&#39; &amp;&amp; ip[i]==&#39;b&#39;)

{
printf(&quot;\n B -&gt;bB&quot;);
pop();push(&#39;B&#39;);push(&#39;b&#39;);

}
else
if(stack[top-1]==&#39;B&#39; &amp;&amp; ip[i]==&#39;a&#39;)
{
printf(&quot;\n B -&gt; epsilon&quot;);
pop();
}
else
error();}}}

2)Lab Assignment: Implement Predictive Parser using C for the Expression Grammar

E  TE’
E’ +TE’ | ε
T  FT’
T’ *FT’ | ε
F  (E) | d
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

int i=0,top=0;
char stack[20],ip[20];

void push(char c)
{
if (top&gt;=20)
printf(&quot;Stack Overflow&quot;);
else
stack[top++]=c;
}

void pop(void)
{
if(top&lt;0)
printf(&quot;Stack underflow&quot;);
else
top--;
}

void error(void)
{
printf(&quot;\n\nSyntax Error!!!! String is invalid\n&quot;);
getch();
exit(0);
}

int main()
{
int n;

printf(&quot;The given grammar is\n\n&quot;);
printf(&quot;E -&gt; TA\n\n&quot;);
printf(&quot;A -&gt; +TA | epsilon \n\n&quot;);
printf(&quot;T -&gt; FB\n\n&quot;);
printf(&quot;B -&gt; *FB | epsilon \n\n&quot;);
printf(&quot;F -&gt; (E) | d \n\n&quot;);
printf(&quot;Enter the string to be parsed:\n&quot;);
scanf(&quot;%s&quot;,ip);
n=strlen(ip);
ip[n]=&#39;$&#39;;
ip[n+1]=&#39;\0&#39;;
push(&#39;$&#39;);
push(&#39;E&#39;);
while(ip[i]!=&#39;\0&#39;)
{ if(ip[i]==&#39;$&#39; &amp;&amp; stack[top-1]==&#39;$&#39;)
{
printf(&quot;\n\n Successful parsing of string \n&quot;);
return(1);
}
else
if(ip[i]==stack[top-1])
{
printf(&quot;\nmatch of %c occured &quot;,ip[i]);
i++;pop();
}
else
{
if(stack[top-1]==&#39;E&#39; &amp;&amp; ip[i]==&#39;d&#39;)

{
printf(&quot; \n E -&gt;TA&quot;);
pop();
push(&#39;A&#39;);
push(&#39;T&#39;);
}
else
if(stack[top-1]==&#39;A&#39; &amp;&amp; ip[i]==&#39;+&#39;)
{
printf(&quot;\n A -&gt;+TA&quot;);
pop();
push(&#39;A&#39;);
push(&#39;T&#39;);
push(&#39;+&#39;);
}
else
if(stack[top-1]==&#39;A&#39; &amp;&amp; ip[i]==&#39;$&#39;)
{
printf(&quot;\n A -&gt; epsilon&quot;);
pop();
}
else
if(stack[top-1]==&#39;T&#39; &amp;&amp; ip[i]==&#39;d&#39;)
{
printf(&quot; \n T -&gt;FB&quot;);
pop();
push(&#39;B&#39;);
push(&#39;F&#39;);
}

else if(stack[top-1]==&#39;B&#39; &amp;&amp; ip[i]==&#39;*&#39;)
{
printf(&quot;\n B -&gt;*FB&quot;);
pop();
push(&#39;B&#39;);
push(&#39;F&#39;);
push(&#39;*&#39;);
}
else if(stack[top-1]==&#39;B&#39; &amp;&amp; (ip[i]==&#39;+&#39;||ip[i]==&#39;$&#39;))
{
printf(&quot;\n B -&gt; epsilon&quot;);
pop();
}
else if(stack[top-1]==&#39;F&#39; &amp;&amp; ip[i]==&#39;(&#39;)
{
printf(&quot;\n F -&gt;(E)&quot;);
pop();
push(&#39;)&#39;);
push(&#39;E&#39;);
push(&#39;(&#39;);
}
else if(stack[top-1]==&#39;F&#39; &amp;&amp; ip[i]==&#39;d&#39;)
{
printf(&quot;\n F -&gt;d&quot;);
pop();
push(&#39;d&#39;);
}
else
error();

}
}
}
